# 

---
title: "ggmap package assignment #8"
author: "Mehana Leafchild"
format: html
editor: visual
---

# What is ggmap?

The package ggmap is a tool that allows users to visualize spatial data from other map services like google maps. This can be helpful when visualizing data sets. Rather than just looking at a table with number we can turn that table into a geographical visual representation.

## Lets read in our libraries

```{r}
library(plotly)
library(dplyr)
library(ggmap)
library(ggplot2)
```

### Before we start we need to generate a Google maps API key.

1.  Go to the [**Google Maps Platform**](https://mapsplatform.google.com/)

2.  Go to the Credentials page

3.  Click Create credentials

4.  Click API key

5.  Your new API key will appear in the API key created dialog

#### Unfortunately Google API has a subscription fee and so it may not be useful or easy to use for fun.

### To read in the key use this fucntion

```{r}
register_google(key = "AIzaSyAVNo8B0Quo97QVBIzsIIJh6rQ0vu1J6k4", write = TRUE)
```

### Lets look at some specific functions in ggmap

1\. Here is how to generate a standard map

```{r}
# generate a map centered around Honolulu
map <- get_map(location = "Honolulu, Hawaii", zoom = 12, maptype = "terrain")

# Plot the map
ggmap(map)
```

2.  Here is how to generate a map based on an address

```{r}
# Geocode an address, finds a point based on address name like typing in a name in a search engine
location <- geocode("Chaminade University of Honolulu, Hawaii")

print(location)
# Use geocoded coordinates on a map
map <- get_map(location = c(lon = location$lon, lat = location$lat), zoom = 15)
ggmap(map)
```

3.  Use longitude and latitude to plot. a point onto the map

```{r}
# example data
locations <- data.frame(
  lon = c(-157.8107, -157.817),
  lat = c(21.2906, 21.275),
  label = c("Chaminade", "Diamond Head")
)

# add a point on a map
ggmap(map) +
  geom_point(data = locations, aes(x = lon, y = lat), color = "red", size = 3) +
  geom_text(data = locations, aes(x = lon, y = lat, label = label), vjust = -1)

```

4.  Customize the map using "terrain", "satellite", "roadmap", and "hybrid"

```{r}
satellite_map <- get_map(location = "Honolulu, Hawaii", zoom = 12, maptype = "satellite")
ggmap(satellite_map)
```

Lets try hybrid to see the difference.

```{r}

hybrid_map <- get_map(location = "Honolulu, Hawaii", zoom = 12, maptype = "hybrid")
ggmap(hybrid_map)
```

5.  To create bounding boxes to assign the map an area use (bbox)

```{r}
# Define a bounding box
bbox <- c(left = -157.85, bottom = 21.25, right = -157.75, top = 21.35)

# Retrieve map for the bounding box
map_bbox <- get_map(location = bbox, maptype = "terrain")
ggmap(map_bbox)

```

6.  Add heat or density maps using the bounding box we just created. You can use `stat_density2d()` from ggplot2 package

```{r}
# Sample data
points <- data.frame(
  lon = runif(100, -157.85, -157.75),
  lat = runif(100, 21.25, 21.35)
)

ggmap(map_bbox) +
  stat_density2d(data = points, aes(x = lon, y = lat, fill = ..level..), geom = "polygon", alpha = 0.5) +
  scale_fill_gradient(low = "blue", high = "red")

```

### There are lots of other ways you can overlap and add data to ggmap using ggplot2.

the only thing to remember when using ggmap is that you need a google API key to connect to google maps. You have to pay for this key which is not useful for project for school but can be useful when working on large funded projects.
